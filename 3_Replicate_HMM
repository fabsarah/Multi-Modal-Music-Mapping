%% Replicating the HMM run 
% This script is for validating and replicating HMM estimations. We will first
% run a bunch of HMM estimations with the optimal K, then test them for stability! 

% The first part of this script is copied from the HMM_Estimation code. This
% version is less commented (for now)

% a note here: if you don't have access to a computing cluster or, bare minimum,
% the parallel processing toolbox, this will take MANY hours and may cause memory
% errors on a local machine

%% Colormap:
% ie. how we make this look like matplotlib :D
rgb = [ ...   
    94    79   162
    72   104   175
    50   136   189
    76   160   177
   102   194   165
   136   210   165
   171   221   164
   200   233   158
   230   245   152
   243   250   199
   255   255   255  % 0 is white
   255   230   195
   254   224   139
   253   200   120
   253   174    97
   249   141    82
   244   109    67
   230    87    88
   213    62    79
   182    33    72
   158     1    66  ] / 255; 

%% 1. Get the data
%load('All_Data.mat')

%% Getting the non-empty index for rest and task
% This is helpful for later when we want to put the data back in task order

N_nonempty = cell(size(All_Data,2),1);
for subject = 1:size(N_nonempty,1)
subjectdata = All_Data(:,subject);
N_nonempty{subject} = find(~cellfun(@isempty,subjectdata));
end

clear inmat subject subjectdata

%% 2. Vectorizing

data = reshape(All_Data,[],1);%reshape the data
index = cellfun(@isempty, data) == 0;%find the empty cells
data = data(index);%destroy them! (keep only the full cells)
clear index

%% 3. Initializing Parameters
clear T % make sure there isn't another T kicking around
K = 12; % number of states you want
ndim = 68; % number of channels/sources/regions you have
time = 10;% number of timepoints you have per trial
N = 1; % number of trials (my procedure didn't repeat anything, so N=1)
Fs = 512;% sampling rate
T(1:length(data)) = {(Fs*time * ones(N,1))}; % number of data points per song (10 seconds*Fs = 5120)
T = T';%transposing the T vector to match the dimensionality of our data vector

%% 3.1 Setting the initialization parameters
% A lot of the parameterization for HMM is very dependent on the type of data and the type of task
% you have. I have continuous, source-localized EEG data, and these are the parameters I used. The
% HMM-MAR toolbox goes over a lot of these in their wiki, which is very helpful: 
% https://github.com/OHBA-analysis/HMM-MAR/wiki

clear options % make sure there isn't an old options file in the workspace
options = struct();
options.K = K; 
options.Fs = Fs;
options.covtype = 'full';
options.zeromean = 0;
options.standardise = 1;
options.onpower = 1;% Built-in Hilbert...good for EEG
options.DirichletDiag = 10;% keeps states maximally distinct
options.downsample = 256;% downsample the data (this will also be applied to T - yay!)
options.detrend = 1;% detrending, for slow drifts
options.pca = 0.90;% PCA-ing the data to save time, 90% of variance captured
options.useParallel=1;% if you don't have parallel computing, set this to 0. My condolences, it will take more time
options.verbose = 1;%tells you what's happening
%the following can be toggled to save time, useful when running many estimations:
%options.initrep = 1; % Initialize more quickly
%options.initcyc = 1; % Always choose the first initialization
%options.cyc = 90; % Maximum of  90 cycles

%% Initializing matrices for the output data:
% we want to compare free energy and fractional occupancy

% free energy
replications = 50;
FreeEnergy = zeros(replications,1);
all_FE = cell(replications,1);

% fractional occupancy
K = 12;
num_dims = length(data);%how many cells are in the original data
FO = zeros(num_dims,K);% 
dFO = zeros(num_dims,K);
all_FE = cell(replications,1);
all_FO = cell(replications,1);
all_FC = cell(replications,12);
all_TP = cell(replications,1);

%% 4. Run the HMM a lot of times
% Make some tea, rearrange your tabs, etc

for r = 1:replications
    [hmm,Gamma] = hmmmar(data,T,options);

    FO = zeros(num_dims,K);% get the FO
    for j = 1:num_dims
        ind = (1:Fs*t_task) + (j-1) * (Fs*t_task);
        FO(j,:) = mean(Gamma(ind,:));
        dFO(j,:) = mean(abs(Gamma(ind(2:end),:) - Gamma(ind(1:end-1),:)));
    end
    all_FE{r} = dFO;% save the free energy
    all_FO{r} = FO;% and the fractional occupancy
    all_TP{r} = getTransProbs(hmm);% get and save the transitional probability matrices
    for i = 1:K
        [~,S] = getFuncConn(hmm,i); %and that sweet, sweet correlation matrix
        all_FC{r,i} = S; %populate the FC cell
    end
    disp(num2str(r))
end

% save it in an array:
HMM_Replication.all_FE = all_FE;
HMM_Replication.all_FO = all_FO;
HMM_Replication.all_FC = all_FC;
HMM_Replication.all_TP = all_TP;

%% 5. compare the estimations for consistency
% In this section, we're using the STATIS toolbox. If you don't already
% have it, it's linked in the read me

addpath(genpath('STATIS-main'));

temp_in = [HMM_Replication.all_FC'];
temp_in = cat(3,temp_in{:});

all_Result = distatis2(temp_in);

%% Look at C (the similarity matrix)
% if it's a lot of high values, it indicated the estimation is stable:

figure
imagesc(all_Result.C)
colorbar
xticks([])
yticks([])
xlabel('States')
ylabel('States')
%clim([0 1])
colormap(rgb(11:end,:))
title('State Similarity Values: K = 12','FontSize',18)
ylabel('States')
xlabel('States')
set(gcf,'Color','w')
set(gca,'FontSize',16,'FontName','Helvetica')

%% 6. Now the meta-FE:

all_FE = [HMM_Replication.all_FE];
one_FE = nan(replications,1);

for i = 1:replications
    temp_FE = mean(mean(all_FE{i}));
    one_FE(i) = temp_FE;
end

clear i temp*

%% Look at it:
mean_FE = mean(one_FE);

figure
plot(one_FE)
grid on
hold on
plot(repmat(mean_FE,replications,1),'LineWidth',2)% add a solid line to show the mean
title(sprintf('Free Energy Values: K = %d',K),'FontSize',18)
ylabel('Free Energy')
xlabel('HMM Model Runs')
set(gca,'FontSize',16,'FontName','Helvetica')
set(gcf,'Color','w')

% Here, what we hope to see is FE fluctuating around the mean with a low standard deviation. If you have that,
% and the STATIS gave you a good degree of similarity on your FCs, the estimation is stable and we can carry on
% with the analysis!
