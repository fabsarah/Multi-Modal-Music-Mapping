%% Replicating the HMM run 
% This script is for validating and replicating HMM estimations. We will first
% run a bunch of HMM estimations, then test them. 

% The first part of this script is copied from the HMM_Estimation code. This
% version is less commented (for now)

% a note here: if you don't have access to a computing cluster or, bare minimum,
% the parallel processing toolbox, this will take MANY hours and may cause memory
% errors on a local machine

%% Colormap:
% ie. how we make this look like matplotlib :D
rgb = [ ...   
    94    79   162
    72   104   175
    50   136   189
    76   160   177
   102   194   165
   136   210   165
   171   221   164
   200   233   158
   230   245   152
   243   250   199
   255   255   255  % 0 is white
   255   230   195
   254   224   139
   253   200   120
   253   174    97
   249   141    82
   244   109    67
   230    87    88
   213    62    79
   182    33    72
   158     1    66  ] / 255; 

%% Get the data
%load('All_Data.mat')

%% Getting the non-empty index for rest and task
% This is helpful for later when we want to put the data back in task order

N_nonempty = cell(size(All_Data,2),1);
for subject = 1:size(N_nonempty,1)
subjectdata = All_Data(:,subject);
N_nonempty{subject} = find(~cellfun(@isempty,subjectdata));
end

clear inmat subject subjectdata

%% Vectorizing

data = reshape(All_Data,[],1);%reshaping the data
index = cellfun(@isempty, data) == 0;
data = data(index);
clear index

%% Prep: Parameter Estimation
clear T
K = 12; % number of states
ndim = 68; % number of channels
N = 1; % number of trials (songs not repeated)
Fs = 512;% sampling rate
t_task = 40;%time of tasks in seconds
T(1:length(data)) = {(Fs*t_task * ones(N,1))}; % number of data points per task (40 seconds*Fs = 20480)
T = T';%transposing

%% Prep: Setting the initialization parameters
clear options
options = struct();
options.K = K; 
options.Fs = Fs;
options.covtype = 'full';
options.zeromean = 0;
options.standardise_pc = 1;
options.onpower = 1;%Built-in Hilbert
options.DirichletDiag = 10;
options.downsample = 256;%downsample the data
options.detrend = 1;
options.pca = 0.90;% 90% of variance captured
options.useParallel=1;
options.verbose = 1;
options.initrep = 1; % Initialize more quickly
options.initcyc = 1; % Always choose the first initialization
options.cyc = 90; % Maximum of  90 cycles


%% Initializing matrices for the output data:
% we want to compare free energy and fractional occupancy

% free energy
replications = 50;
FreeEnergy = zeros(replications,1);
all_FE = cell(replications,1);

% fractional occupancy, and switching rate
K = 12;
num_dims = length(data);%how many cells are in the original data
FO = zeros(num_dims,K);% 
dFO = zeros(num_dims,K);
all_FE = cell(replications,1);
all_FO = cell(replications,1);
all_FC = cell(replications,12);
all_TP = cell(replications,1);

%% Run the HMM a lot of times
for r = 1:replications
    [hmm,Gamma] = hmmmar(data,T,options);

    FO = zeros(num_dims,K);% get the FO
    for j = 1:num_dims
        ind = (1:Fs*t_task) + (j-1) * (Fs*t_task);
        FO(j,:) = mean(Gamma(ind,:));
        dFO(j,:) = mean(abs(Gamma(ind(2:end),:) - Gamma(ind(1:end-1),:)));
    end
    all_FE{r} = dFO;% save the free energy
    all_FO{r} = FO;% and the fractional occupancy
    all_TP{r} = getTransProbs(hmm);% get and save the transitional probability matrices
    for i = 1:K
        [~,S] = getFuncConn(hmm,i); %and that sweet, sweet correlation matrix
        all_FC{r,i} = S; %populate the FC cell
    end
    disp(num2str(r))
end

% save it in an array:
HMM_Replication.all_FE = all_FE;
HMM_Replication.all_FO = all_FO;
HMM_Replication.all_FC = all_FC;
HMM_Replication.all_TP = all_TP;

%% compare the estimations for consistency
addpath(genpath('STATIS-main'));

temp_in = [HMM_Replication.all_FC'];
temp_in = cat(3,temp_in{:});

all_Result = distatis2(temp_in);

%% Look at C (the similarity matrix)
% if it's a lot of high values, it indicated the estimation is stable:

figure
imagesc(all_Result.C)
colorbar
xticks([])
yticks([])
xlabel('States')
ylabel('States')
%clim([0 1])
colormap(rgb(11:end,:))
title('State Similarity Values: K = 12','FontSize',18)
ylabel('States')
xlabel('States')
set(gcf,'Color','w')
set(gca,'FontSize',16,'FontName','Helvetica')

%% Now the meta-FE:

all_FE = [HMM_Replication.all_FE];
one_FE = nan(replications,1);

for i = 1:replications
    temp_FE = mean(mean(all_FE{i}));
    one_FE(i) = temp_FE;
end

clear i temp*

%% Look at it:
mean_FE = mean(one_FE);

figure
plot(one_FE)
grid on
hold on
plot(repmat(mean_FE,replications,1),'LineWidth',2)% add a solid line to show the mean
title(sprintf('Free Energy Values: K = %d',K),'FontSize',18)
ylabel('Free Energy')
xlabel('HMM Model Runs')
set(gca,'FontSize',16,'FontName','Helvetica')
set(gcf,'Color','w')

%% Now the mean states:
num_dims = 68;% how many regions we have in the FC matrix
temp_in = nan(num_dims,num_dims,replications);

for rep = 1:replications
    tempcell = EEG_Replication.all_FC(rep,:);
    tempcell = cat(3,tempcell{:});
    tempcell = mean(tempcell,3);
    temp_in(:,:,rep) = tempcell;
end

mean_Result = distatis2(temp_in);

clear rep temp*

%% Look at C
figure
imagesc(mean_Result.C)
colorbar
xticks([])
yticks([])
xlabel('States')
ylabel('States')
clim([0 1])
colormap(rgb)
