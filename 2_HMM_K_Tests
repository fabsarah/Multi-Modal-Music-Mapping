%% Selecting a suitable K

% Now that the HMM sequence is operational, it's time to run a bunch of HMMs!
% K selection is extremely specific to the data modality, task, air temperature,
% wind direction, and what you had for breakfast, but this script will cover:

%    1. Looking at the transitional probability matrices
%    2. Initial model tests
%    3. Looking at the state properties

% First, you need to have several HMM estimations run with different values
% for K. Run these using the previous script, remembering to rename the Outdata
% file so you don't lose many hours of time and data.

% Next, you'll need to load them all in and assemble them into something that
% is easier to index:

K_tests{1} = Outdata3.Metrics;
K_tests{2} = Outdata4.Metrics;
K_tests{3} = Outdata5.Metrics;
K_tests{4} = Outdata6.Metrics;
K_tests{5} = Outdata7.Metrics;
K_tests{6} = Outdata8.Metrics;
K_tests{7} = Outdata9.Metrics;
K_tests{8} = Outdata10.Metrics;
K_tests{9} = Outdata12.Metrics;
K_tests{10} = Outdata15.Metrics;
K_tests{11} = Outdata20.Metrics;
K_tests{12} = {'K3';'K4';'K5';'K6';'K7';'K8';'K9';'K10';'K12';'K15';'K20'};% a label file of all of the Ks

%% 1. Examining transitional probability matrices:
% In the paper, we did the following:

%      We interrogated the transitional probability matrix from each estimation. The transitional probability 
%      matrix shows the pairwise likelihood of transitioning to and from each state, represented as a weighted, 
%      directed graph. Estimations with states that are over-represented (ie. always transitioned into) or 
%      under-represented (ie. rarely or never visited) can be considered to poorly fit the data. We found the 
%      estimations with a K of 8 and 12 fit the data best with a transitional probability matrix that did not 
%      feature states strongly over- or under-represented. 

% So let's look at some transitional probability matrices!
labels = K_tests{12};

figure
for i = 1:length(K_tests)-1
  tempdata = K_tests{i}.TP;
  %clim([0 1]) % useful to see everything on the same scale
  subplot(3,4,i)
  imagesc(tempdata)
  colorbar
  title(sprintf('TP Matrix: %s',labels{i}),'FontSize',16)

% and now take a look at the estimations. You want a matrix that doesn't have any states that are always or never
% visited. These are the estimations we'll test further. Back to the paper:

%% 2. Running PLSes on each estimation's fractional occupancy:

%      We further completed initial analyses on these data using PLS, comparing the rest and music listening conditions. 
%      Both estimations returned one significant LV with a p value at or below 0.01 showing the contrast between the 
%      resting state and experiment tasks. Finding both estimations equal up to this point, we interrogated the spatial 
%      properties of the states. Each estimation featured states dominated by temporal regions, a comforting finding in a 
%      music listening study. The estimation with a K of 12 featured bi- and uni-lateral temporal states, while the estimation 
%      with a K of 8 showed exclusively bilateral temporal states.

% For these, you'll need the relevant fractional (FO) metrices. I've included ALL of them here, but you can also choose the ones
% with the best looking TP matrices:

%% Assemble fractional occupancy (FO) into a new object
FO_data{1} = K_tests{1}.FO;
FO_data{2} = K_tests{2}.FO;
FO_data{3} = K_tests{3}.FO;
FO_data{4} = K_tests{4}.FO;
FO_data{5} = K_tests{5}.FO;
FO_data{6} = K_tests{6}.FO;
FO_data{7} = K_tests{7}.FO;
FO_data{8} = K_tests{8}.FO;
FO_data{9} = K_tests{9}.FO;
FO_data{10} = K_tests{10}.FO;
FO_data{11} = K_tests{11}.FO;

%% Appetizer PLS: FO
% now we run a PLS on each FO to see if one estimation gives us more reliable results
% see the Read Me for a link to the Pls toolbox

addpath(genpath('Pls'))
FO_results = cell(length(FO_data),1);

%% Get the task indices
idx_rest = [1:5,46:53];
idx_ctrl = [6:10,41:45];
idx_exp = [11:40];

%% Slice it up
Rest_FO = cell(length(FO_data),1);
Ctrl_FO = cell(length(FO_data),1);
Exp_FO = cell(length(FO_data),1);

for i = 1:length(FO_data)
    Rest_FO{i} = FO_data{i}(idx_rest,:);
    Ctrl_FO{i} = FO_data{i}(idx_ctrl,:);  
    Exp_FO{i} = FO_data{i}(idx_exp,:);
end

clear i idx*

%% Now assemble PLS matrices:

for k = 1:length(FO_results)
    indata = cell(3,1);% 3 tasks (rest, control, and experiment)
    indata{1} = Rest_FO{k};
    indata{2} = Ctrl_FO{k};
    indata{3} = Exp_FO{k}
    indata = cell2mat(indata);
    numsubs = 17;% how many participants per task. If there are different amounts per group, this will be an array
    ncond = 3;% how many conditions/tasks...here, 3 (rest, control, experiment)

    clear i option % make sure there's no old options file hanging around
    option.method = 1;% mean-centred PLS
    option.num_perm = 500;
    option.num_boot = 100;

    K_res = pls_analysis({indata},numsubs,ncond,option);%run the pls
    FO_results{k} = K_res;% put the results into the array
end
clear i k indata numsubs tempdata option K_res n*


%% Assemble and plot p values
ncond = 3;
FO_p = nan(3,length(FO_results));% we will have 1 LV per condition
for k = 1:length(FO_results)
    temp = FO_results{k}.perm_result.sprob;% get the array of p-values
    for LV = 1:ncond
        FO_p(LV,k) = temp(LV);
    end
end
clear k temp LV %make look nice

%%
figure
for LV = 1:ncond
    subplot(ncond,1,LV)
    bar(FO_p(LV,:))
    grid on
    ylim([0 0.1])
    xticklabels(K_tests{12})%the labels we saved earlier
    title(sprintf('PLS p values, FO LV %d',LV))
end
clear LV

% Here, you should hopefully have at least one model with a significant LV. 
% Next, we're going to go look at it:

%% Plot mean-centred PLS results
est = 4;%the estimation you want to plot
res =FO_results{est}; % what results you want to plot
K = size(FO_data{est},2);% the number of states/K for this estimation
LV = 1;% What LV you want to plot
p = res.perm_result.sprob(LV);% the p-value of that LV
headline = sprintf('K Test PLS, p = %f',p);% the title with the p value
xlabs = {'Rest';'Control';'Experiment'};%for example

figure
% The first plot are your contrasts: what conditions are in contrast vs. loading together
subplot(1,2,1)
z = res.boot_result.orig_usc;
limit = length(z);
bar(z(:,LV))
hold on
yneg = res.boot_result.llusc(1:limit,LV);
ypos = res.boot_result.ulusc(1:limit,LV);
errorbar(1:length(z(1:limit,LV)),z(1:limit,LV),yneg-z(1:limit,LV),ypos-z(1:limit,LV),'.')
colorbar off
grid on
xlim([0 length(z)+1])
xticks(1:length(z))
xticklabels(xlabs)
xtickangle(45)
title(headline,'FontSize',16)

% The second plot are your saliences: which state's FO is linked to that effect:
x = (res.boot_result.compare_u(:,LV));
%x(abs(x)<3) = 0;%optional thresholding of the plot
subplot(1,2,2)
imagesc(x);
%colormap(rgb) %optional colormap, included at the bottom of this document
%clim([-8 8])
colorbar
xticks([])
yticks(1:K)
yticklabels(1:K)     
ylabel('State')
title(sprintf('Fractional Occupancy LV %d',LV),'FontSize',16)

% to interpret this, you want to line up the cool colour saliences with the negative contrasts, and the warm colour
% saliences with the positive contrasts. NOTE: +/- values here DON'T NECESSARILY MEAN lower or higher FO...it's just
% showing you where the effect is in your input data. There's sample syntax for plotting the indata at the end of this script.

clear res LV p xlabs tasks limit ypos yneg ans x z plotdata headline

%% Now correlate usc and vsc. This will tell us which estimations are similar/dissimilar to each other estimation
LV_corr = nan(1,length(FO_results));
for k = 1:length(FO_results)
    u = FO_results{k}.usc;
    v = FO_results{k}.vsc;
    tempcorr = corrcoef(u,v);
    LV_corr(k) = tempcorr(2,1);
end
clear k tempcorr u v

%%
figure
bar(LV_corr)
ylabel('r value')
grid on
xticklabels(K_tests{12})
title('USC VSC Correlations, LV1 Variable K')

% By now, one estimation will have hopefully emerged victorious! From here, it's onto testing the optimal K for stability.

%% for posterity, save EVERYTHING:

K_Vars.Estimations = K_tests(1:length(K_tests)-1);%get the indata
K_Vars.Labels = K_tests{12};
K_Vars.FO.FO_data = FO_data;
K_Vars.FO.FO_results = FO_Results

% And if you want to see the input data, sample syntax is here:


%% Plot the FO indata
addpath(genpath('Pls'))
ncond = 3;

est = 4% what indata you want to plot
plotdata = [mean(Rest_FO{est});mean(Ctrl_FO);mean(Exp_FO)];

%%
xlabs = {'Rest' ,'Control','Experiment'};

figure
barh(plotdata')
%imagesc(plotdata)
%colorbar
%colormap(rgb)
yticks(1:7)
yticklabels(1:7)
ylabel('State')
xticks(1:7)
xticklabels(xlabs)
xtickangle(45)
title(sprintf('Input Data: FO, %s',K_tests{12}(est)),'FontSize',18)

%% Here's the rgb...similar to Matplotlib/ggplot, it's a gradient from cool to warm with white as the zero point:
rgb = [ ...   
    94    79   162
    72   104   175
    50   136   189
    76   160   177
   102   194   165
   136   210   165
   171   221   164
   200   233   158
   230   245   152
   243   250   199
   255   255   255  % 0 is white
   255   230   195
   254   224   139
   253   200   120
   253   174    97
   249   141    82
   244   109    67
   230    87    88
   213    62    79
   182    33    72
   158     1    66  ] / 255; 
