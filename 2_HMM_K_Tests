%% Selecting a suitable K

% Now that the HMM sequence is operational, it's time to run a bunch of HMMs!
% K selection is extremely specific to the data modality, task, air temperature,
% wind direction, and what you had for breakfast, but this script will cover:

%    1. Looking at the transitional probability matrices
%    2. Initial model tests
%    3. Looking at the state properties

% First, you need to have several HMM estimations run with different values
% for K. Run these using the previous script, remembering to rename the Outdata
% file so you don't lose many hours of time and data.

% Next, you'll need to load them all in and assemble them into something that
% is easier to index:

K_tests{1} = Outdata3.Metrics;
K_tests{2} = Outdata4.Metrics;
K_tests{3} = Outdata5.Metrics;
K_tests{4} = Outdata6.Metrics;
K_tests{5} = Outdata7.Metrics;
K_tests{6} = Outdata8.Metrics;
K_tests{7} = Outdata9.Metrics;
K_tests{8} = Outdata10.Metrics;
K_tests{9} = Outdata12.Metrics;
K_tests{10} = Outdata15.Metrics;
K_tests{11} = Outdata20.Metrics;
K_tests{12} = {'K3';'K4';'K5';'K6';'K7';'K8';'K9';'K10';'K12';'K15';'K20'};% a label file of all of the Ks

%% 1. Examining transitional probability matrices:
% In the paper, we did the following:

%      We interrogated the transitional probability matrix from each estimation. The transitional probability 
%      matrix shows the pairwise likelihood of transitioning to and from each state, represented as a weighted, 
%      directed graph. Estimations with states that are over-represented (ie. always transitioned into) or 
%      under-represented (ie. rarely or never visited) can be considered to poorly fit the data. We found the 
%      estimations with a K of 8 and 12 fit the data best with a transitional probability matrix that did not 
%      feature states strongly over- or under-represented. 

% So let's look at some transitional probability matrices!
labels = K_tests{12};

figure
for i = 1:length(K_tests)-1
  tempdata = K_tests{i}.TP;
  %clim([0 1]) % useful to see everything on the same scale
  subplot(3,4,i)
  imagesc(tempdata)
  colorbar
  title(sprintf('TP Matrix: %s',labels{i}),'FontSize',16)

% and now take a look at the estimations. You want a matrix that doesn't have any states that are always or never
% visited. These are the estimations we'll test further. Back to the paper:

%      We further completed initial analyses on these data using PLS, comparing the rest and music listening conditions. 
%      Both estimations returned one significant LV with a p value at or below 0.01 showing the contrast between the 
%      resting state and experiment tasks. Finding both estimations equal up to this point, we interrogated the spatial 
%      properties of the states. Each estimation featured states dominated by temporal regions, a comforting finding in a 
%      music listening study. The estimation with a K of 12 featured bi- and uni-lateral temporal states, while the estimation 
%      with a K of 8 showed exclusively bilateral temporal states.

% For these, you'll need the relevant fractional (FO) metrices:
%get FO
%% Assemble fractional occupancy (FO) into a new object
FO_data{1} = K_tests{1}.FO;
FO_data{2} = K_tests{2}.FO;
FO_data{3} = K_tests{3}.FO;
FO_data{4} = K_tests{4}.FO;
FO_data{5} = K_tests{5}.FO;
FO_data{6} = K_tests{6}.FO;
FO_data{7} = K_tests{7}.FO;
FO_data{8} = K_tests{8}.FO;
FO_data{9} = K_tests{9}.FO;
FO_data{10} = K_tests{10}.FO;
FO_data{11} = K_tests{11}.FO;

%% Appetizer PLS: FO
% now we run a PLS on each FO to see if one estimation gives us more reliable results
% see the Read Me for a link to the Pls toolbox

addpath(genpath('Pls'))
FO_results = cell(length(FO_data),1);

%% Get the task indices
idx_rest = [1:5,46:53];
idx_ctrl = [6:10,41:45];
idx_exp = [11:40];

%% Slice it up
Rest_FO = cell(length(FO_data),1);
Ctrl_FO = cell(length(FO_data),1);
Exp_FO = cell(length(FO_data),1);

for i = 1:length(FO_data)
    Rest_FO{i} = FO_data{i}(idx_rest,:);
    Ctrl_FO{i} = FO_data{i}(idx_ctrl,:);  
    Exp_FO{i} = FO_data{i}(idx_exp,:); %%%%% START HERE
end

clear i idx*

%% Now assemble PLS matrices:

for k = 1:length(FO_results)
    indata = cell(3,1);% 3 tasks (rest, control, and experiment)
    indata{1} = Rest_FO{k};
    indata{2} = Ctrl_FO{k};
    indata{3} = Exp_FO{k}
    indata = cell2mat(indata);
    numsubs = 17;% how many participants per task. If there are different amounts per group, this will be an array
    ncond = 3;% how many conditions/tasks...here, 3 (rest, control, experiment)

    clear i option % make sure there's no old options file hanging around
    option.method = 1;% mean-centred PLS
    option.num_perm = 500;
    option.num_boot = 100;

    K_res = pls_analysis({indata},numsubs,ncond,option);%run the pls
    FO_results{k} = K_res;% put the results into the array
end
clear i k indata numsubs tempdata option K_res n*


%%%%%%%%%% START HERE %%%%%%%%%%%%%%%%%%%

%% Assemble and plot p values
FO_p = nan(3,9);
for k = 1:9
    temp = FO_results{k}.perm_result.sprob;
    for LV = 1:3
        FO_p(LV,k) = temp(LV);
    end
end
clear k temp LV %make look nice
%%
figure
for LV = 1:3
    subplot(3,1,LV)
    bar(FO_p(LV,:))
    grid on
    ylim([0 0.1])
    xticklabels(K_testsDiadiDS.labels)
    title(sprintf('PLS p values, FO LV %d',LV))
end
clear LV
%% Plot mean-centred PLS results

res =K_testsDiadiDS.Metrics.FO_results{4}; % what results you want to plot
LV = 2;% What LV you want to plot
p = res.perm_result.sprob(LV);% the p-value of that LV
headline = sprintf('K Test PLS, p = %f',p);% the title with the p value
xlabs = {'Baseline start' ,'Far vision','Far No Vision',...
    'Near vision','Near no vision','Positive control','Baseline end'};

figure
subplot(1,2,1)
z = res.boot_result.orig_usc;
limit = length(z);
bar(z(:,LV))
hold on
yneg = res.boot_result.llusc(1:limit,LV);
ypos = res.boot_result.ulusc(1:limit,LV);
errorbar(1:length(z(1:limit,LV)),z(1:limit,LV),yneg-z(1:limit,LV),ypos-z(1:limit,LV),'.')
colorbar off
grid on
xlim([0 length(z)+1])
xticks(1:length(z))
xticklabels(xlabs)
xtickangle(45)
title(headline,'FontSize',16)

x = (res.boot_result.compare_u(:,LV));
x(abs(x)<3) = 0;
%plotdata = reshape(x,4,[]);
subplot(1,2,2)
shower_tile_plot(x);
colormap(rgb)
clim([-10 10])
colorbar
xticks([])
yticks(1.5:length(x)+0.5)
yticklabels(length(x):-1:1)     
ylabel('State')
title(sprintf('Fractional Occupancy LV %d',LV),'FontSize',16)

clear res LV p xlabs tasks limit ypos yneg ans x z plotdata headline

%% Now correlate usc and vsc. This will tell us which estimations are similar/dissimilar to each other estimation
LV_corr = nan(1,9);
for k = 1:9
    u = FO_results{k}.usc;
    v = FO_results{k}.vsc;
    tempcorr = corrcoef(u,v);
    LV_corr(k) = tempcorr(2,1);
end
clear k tempcorr u v
%%
figure
bar(LV_corr)
ylabel('r value')
grid on
xticklabels(K_testsDiadiDS.labels)
title('USC VSC Correlations, LV1 Variable K')

%% Transitional Probability by Condition
% Assemble everything into a new object
K_testsDiadiDS.TP{1} = Diadi2_hmm4.Metrics.Task_TP;
K_testsDiadiDS.TP{2} = Diadi2_hmm5.Metrics.Task_TP;
K_testsDiadiDS.TP{3} = Diadi2_hmm6.Metrics.Task_TP;
K_testsDiadiDS.TP{4} = Diadi2_hmm7.Metrics.Task_TP;
K_testsDiadiDS.TP{5} = Diadi2_hmm8.Metrics.Task_TP;
K_testsDiadiDS.TP{6} = Diadi2_hmm9.Metrics.Task_TP;
K_testsDiadiDS.TP{7} = Diadi2_hmm10.Metrics.Task_TP;
K_testsDiadiDS.TP{8} = Diadi2_hmm12.Metrics.Task_TP;
K_testsDiadiDS.TP{9} = Diadi2_hmm15.Metrics.Task_TP;

%% Appetizer PLS: TP

addpath(genpath('Pls'))
TP_data = K_testsDiadiDS.Metrics.TP;
TP_results = cell(9,1);
for k = 1:9
    tempdata = TP_data{k};
    indata = cell(7,1);
    task_dex = 1:3:21;
    for task = 1:7
        temp_task = tempdata(task_dex(task):task_dex(task)+2);
        temp_task = cat(3,temp_task{:});
        indata{task} = mean(temp_task,3);
    end
    indata = cell2mat(indata);
    numsubs = 44;
    clear i option
    option.method = 1;
    option.num_perm = 500;
    option.num_boot = 100;

    K_res = pls_analysis({indata},numsubs,7,option);
    TP_results{k} = K_res;
end
clear i k indata numsubs tempdata option K_res
%% Assemble and plot p values
TP_p = nan(3,9);
for k = 1:9
    temp = TP_results{k}.perm_result.sprob;
    for LV = 1:3
        TP_p(LV,k) = temp(LV);
    end
end
clear k temp LV
%%
figure
for LV = 1:3
    subplot(3,1,LV)
    bar(TP_p(LV,:))
    grid on
    ylim([0 0.1])
    xticklabels(K_testsDiadiDS.labels)
    title(sprintf('PLS p values, TP Matrices LV %d',LV))
end
clear LV
%% Plot mean-centred PLS results

res =K_testsDiadiDS.Metrics.TP_results{3}; % what results you want to plot
LV = 1;% What LV you want to plot
p = res.perm_result.sprob(LV);% the p-value of that LV
headline = sprintf('K Test PLS, p = %f',p);% the title with the p value
xlabs = {'Baseline start' ,'Far vision','Far No Vision',...
    'Near vision','Near no vision','Positive control','Baseline end'};
rgb = K_testsDiadiDS.Metrics.rgb;

figure
subplot(1,2,1)
z = res.boot_result.orig_usc;
limit = length(z);
bar(z(:,LV))
hold on
yneg = res.boot_result.llusc(1:limit,LV);
ypos = res.boot_result.ulusc(1:limit,LV);
errorbar(1:length(z(1:limit,LV)),z(1:limit,LV),yneg-z(1:limit,LV),ypos-z(1:limit,LV),'.')
colorbar off
grid on
xlim([0 length(z)+1])
xticks(1:length(z))
xticklabels(xlabs)
xtickangle(45)
title(headline,'FontSize',16)

x = (res.boot_result.compare_u(:,LV));
x(abs(x)<3) = 0;
plotdata = reshape(x,sqrt(length(x)),[]);
subplot(1,2,2)
shower_tile_plot(plotdata);
pbaspect([1,1,1])
colormap(rgb)
clim([-7 7])
colorbar
xticks(1.5:length(plotdata)+0.5)
xticklabels(1:length(plotdata))
yticks(1.5:length(plotdata)+0.5)
yticklabels(length(plotdata):-1:1)     
ylabel('From State')
xlabel('To State')
title(sprintf('Fractional Occupancy LV %d',LV),'FontSize',16)

clear res LV p xlabs tasks limit ypos yneg ans x z plotdata headline

%% HMM + Physio Behavioural PLS
% Now we're running a behavioural PLS with the physiological measures AND the brain data

addpath(genpath('Pls'))
FO_data = K_testsDiadiDS.Metrics.FO;
FOPhys_results = cell(9,1);
Far_beh = K_testsDiadiDS.Metrics.physio_far;
Far_beh = cat(3,Far_beh{:});
Near_beh = K_testsDiadiDS.Metrics.physio_near;
Near_beh = cat(3,Near_beh{:});
Side_2 = [nanmean(Far_beh,3);nanmean(Near_beh,3)];
Side_2(isnan(Side_2)) = 0;
Side_2([42,86],:) = [];% removing subject 42, who has weird eye data


% Side_2 = [K_testsDiadiDS.Metrics.physio_far;K_testsDiadiDS.Metrics.physio_near];
% Side_2 = cell2mat(Side_2);
% Side_2(isnan(Side_2)) = 0;

for k = 1:9
    tempdata = FO_data{k};
    indata = tempdata([4:6,10:12],:);
    Far = cat(3,indata{1:3});
    Near = cat(3,indata{4:6});
    indata = [nanmean(Far,3);nanmean(Near,3)];
    indata(isnan(indata)) = 0;
    indata(isnan(indata)) = 0;

    indata([42,86],:) = [];% removing subject 42, who has weird eye data


    numsubs = 43;
    
    clear i option
    option.method = 3;
    option.num_perm = 500;
    option.num_boot = 100;
    option.stacked_behavdata = Side_2;% the behaviour matrix

    K_res = pls_analysis({indata},numsubs,2,option);
    FOPhys_results{k} = K_res;
end
clear i k indata numsubs tempdata option K_res

K_testsDiadiDS.Metrics.FOPhys_results = FOPhys_results;
%% Assemble and plot p values
FOphys_p = nan(3,9);
for k = 1:9
    temp = FOPhys_results{k}.perm_result.sprob;
    for LV = 1:4
        FOphys_p(LV,k) = temp(LV);
    end
end
clear k temp LV
%%
Labs = {'Far Body';'Far Eyes';'Far Face';'Near Body';'Near Eyes';'Near Face'};
res = K_testsDiadiDS.Metrics.FOPhys_results{3};
pvals = res.perm_result.sprob;
LV = 1;
rgb = K_testsDiadiDS.Metrics.rgb;

figure
subplot(1,2,1)
z = res.boot_result.orig_corr(:,LV);
bar(z)
hold on
yneg = res.boot_result.llcorr(:,LV);
ypos = res.boot_result.ulcorr(:,LV);
errorbar(1:length(z),z,yneg-z,ypos-z,'.')
%colorbar off
grid on
xticks(1:length(Labs))
xticklabels(Labs)
xtickangle(45)
title('Physio Data: Orig Corr','FontSize',16)

subplot(1,2,2)
x = (res.boot_result.compare_u(:,LV));
%x = reshape(x,40,64)';
x(abs(x)<2) = 0;
shower_tile_plot(x);
colormap(rgb)
clim([-4 4])
colorbar
xticks([])
yticks(1.5:length(x)+0.5)
yticklabels(length(x):-1:1)
ylabel('States','FontSize',16)
xlabel('FO','FontSize',16)
title(sprintf('Fractional Occ, Compare U, p = %f',pvals(LV)),'FontSize',16)

set(gcf,'color','w')

clear s K x y* z res headline

%% HMM + Physio Behavioural PLS
Side_1 = K_testsDiadiDS.Metrics.FO{9};
Side_1 = Side_1([4:6,10:12],:);
Far = cat(3,Side_1{1:3});
Near = cat(3,Side_1{4:6});
Side_1 = [mean(Far,3);mean(Near,3)];
Side_1(isnan(Side_1)) = 0;


Far_beh = K_testsDiadiDS.Metrics.physio_far;
Far_beh = cat(3,Far_beh{:});
Near_beh = K_testsDiadiDS.Metrics.physio_near;
Near_beh = cat(3,Near_beh{:});
Side_2 = [mean(Far_beh,3);mean(Near_beh,3)];
Side_2(isnan(Side_2)) = 0;

clear i option
option.method = 3;
option.num_perm = 500;
option.num_boot = 100;
option.stacked_behavdata = Side_2;% the behaviour matrix

K_res = pls_analysis({Side_1},44,6,option);


%% Appetizer PLS: Physio Behavioural PLS
% Participant 42 has WEIRD eye data! We're going to take them out and see
% how that works

addpath(genpath('Pls'))
TP_data = K_testsDiadiDS.Metrics.TP;
TPPhys_results = cell(9,1);
Far_beh = K_testsDiadiDS.Metrics.physio_far;
Far_beh = cat(3,Far_beh{:});
Near_beh = K_testsDiadiDS.Metrics.physio_near;
Near_beh = cat(3,Near_beh{:});
Side_2 = [nanmean(Far_beh,3);nanmean(Near_beh,3)];
Side_2(isnan(Side_2)) = 0;
Side_2([42,86],:) = [];% removing subject 42, who has weird eye data

% Side_2 = [K_testsDiadiDS.Metrics.physio_far;K_testsDiadiDS.Metrics.physio_near];
% Side_2 = cell2mat(Side_2);
% Side_2(isnan(Side_2)) = 0;

for k = 1:9
    tempdata = TP_data{k};
    indata = tempdata([4:6,10:12],:);
    Far = cat(3,indata{1:3});
    Near = cat(3,indata{4:6});
    indata = [nanmean(Far,3);nanmean(Near,3)];
    indata(isnan(indata)) = 0;
    indata(isnan(indata)) = 0;

    indata([42,86],:) = [];


    numsubs = 43;
    
    clear i option
    option.method = 3;
    option.num_perm = 500;
    option.num_boot = 100;
    option.stacked_behavdata = Side_2;% the behaviour matrix

    K_res = pls_analysis({indata},numsubs,2,option);
    TPPhys_results{k} = K_res;
end
clear i k indata numsubs tempdata option K_res

%% Assemble and plot p values
TPphys_p = nan(3,9);
for k = 1:9
    temp = TPPhys_results{k}.perm_result.sprob;
    for LV = 1:4
        TPphys_p(LV,k) = temp(LV);
    end
end
clear k temp LV
%%
Labs = {'Far Body';'Far Eyes';'Far Face';'Near Body';'Near Eyes';'Near Face'};
res = TPPhys_results{3};
pvals = res.perm_result.sprob;
LV = 1;
rgb = K_testsDiadiDS.Metrics.rgb;

figure
subplot(1,2,1)
z = res.boot_result.orig_corr(:,LV);
bar(z)
hold on
yneg = res.boot_result.llcorr(:,LV);
ypos = res.boot_result.ulcorr(:,LV);
errorbar(1:length(z),z,yneg-z,ypos-z,'.')
%colorbar off
grid on
xticks(1:length(Labs))
xticklabels(Labs)
xtickangle(45)
title('Physio Data: Orig Corr','FontSize',16)

subplot(1,2,2)
x = (res.boot_result.compare_u(:,LV));
K = sqrt(length(x));
x = reshape(x,K,K)';
x(abs(x)<2) = 0;
shower_tile_plot(x);
pbaspect([1 1 1])
colormap(rgb)
clim([-4 4])
colorbar
xticks(1.5:length(x)+0.5)
xticks(1:length(x))
yticks(1.5:length(x)+0.5)
yticklabels(length(x):-1:1)
ylabel('From State','FontSize',16)
xlabel('To State','FontSize',16)
title(sprintf('Trans Probs, Compare U, p = %f',pvals(LV)),'FontSize',16)

set(gcf,'color','w')

clear s K x y* z res headline
%% Save it all!
K_testsDiadiDS.Metrics.FOPhys_results = FOPhys_results;
K_testsDiadiDS.Metrics.TPPhys_results = TPPhys_results;
%% Look at the input data!
% Admittedly, this script is too  long. Will need to break it up...
% eventually. 

%% Plot the FO indata
addpath(genpath('Pls'))
FO_data = K_testsDiadiDS.Metrics.FO;

for k = 4
    tempdata = FO_data{k};
    indata = cell(7,1);
    task_dex = 1:3:21;
    for task = 1:7
        temp_task = tempdata(task_dex(task):task_dex(task)+2);
        temp_task = cat(3,temp_task{:});
        indata{task} = mean(temp_task,3);
    end
end
clear i k numsubs tempdata option K_res

%%
plotdata = nan(6,7);
for i = 1:7
    plotdata(:,i) = mean(indata{i});
end
clear i

%%
xlabs = {'Baseline start' ,'Far vision','Far No Vision',...
    'Near vision','Near no vision','Positive control','Baseline end'};

figure
barh(plotdata')
%imagesc(plotdata)
%colorbar
%colormap(rgb)
yticks(1:7)
yticklabels(1:7)
ylabel('State')
xticks(1:7)
xticklabels(xlabs)
xtickangle(45)
title('Input Data: FO, K = 7','FontSize',18)
%% Plot the behavioural PLS data:

FO_data = K_testsDiadiDS.Metrics.FO;
TP_data = K_testsDiadiDS.Metrics.TP;
Far_beh = K_testsDiadiDS.Metrics.physio_far;
Far_beh = cat(3,Far_beh{:});
Near_beh = K_testsDiadiDS.Metrics.physio_near;
Near_beh = cat(3,Near_beh{:});
Side_2 = [nanmean(Far_beh,3);nanmean(Near_beh,3)];
Side_2(isnan(Side_2)) = 0;
Side_2([42,86],:) = [];% removing subject 42, who has weird eye data


for k = 3
    tempdata = FO_data{k};
    indata_FO = tempdata([4:6,10:12],:);
    Far = cat(3,indata_FO{1:3});
    Near = cat(3,indata_FO{4:6});
    indata_FO = [nanmean(Far,3);nanmean(Near,3)];
    indata_FO(isnan(indata_FO)) = 0;
    indata_FO(isnan(indata_FO)) = 0;
    indata_FO([42,86],:) = [];% removing subject 42, who has weird eye data

    temp_TP = TP_data{k};
    indata_TP = temp_TP([4:6,10:12],:);
    Far = cat(3,indata_TP{1:3});
    Near = cat(3,indata_TP{4:6});
    indata_TP = [nanmean(Far,3);nanmean(Near,3)];
    indata_TP(isnan(indata_FO)) = 0;
    indata_TP(isnan(indata_FO)) = 0;
    indata_TP([42,86],:) = [];% removing subject 42, who has weird eye data

end

clear k temp* Far Near
%%
plotdata_FO = [mean(indata_FO(1:43,:),1);mean(indata_FO(44:end,:),1)];
%plotdata_FO = normalize(plotdata_FO,2);
plotdata_beh = [mean(Side_2(1:43,:),1);mean(Side_2(44:end,:),1)];
%plotdata_beh = normalize(plotdata_beh,2);
plotdata_beh = plotdata_beh*(10e14);
K = length(plotdata_FO);
Labs = {'Body';'Eyes';'Face'};

figure
subplot(1,2,1)
imagesc(plotdata_beh')
colormap(rgb)
x = repmat(1:2,3,1);
y = repmat(1:3,2,1)';
t = num2cell(plotdata_beh');
text(x(:), y(:), t, 'HorizontalAlignment', 'Center','Color','k','FontSize',11)
yticks(1:3)
yticklabels(Labs)
xticks(1:2)
xticklabels({'Far','Near'})
clim([-6 6])
colorbar
title('Physio Input Data','FontSize',16)

subplot(1,2,2)
x = repmat(1:2,K,1);
y = repmat(1:K,2,1)';
t = num2cell(plotdata_FO');
imagesc(plotdata_FO')
colormap(rgb)
text(x(:), y(:), t, 'HorizontalAlignment', 'Center','Color','k','FontSize',11)
yticks(1:7)
xticks(1:2)
xticklabels({'Far','Near'})
colorbar
title('FO Input Data','FontSize',16)
%% Correlate to see PLS input:
%tempdata_FO = normalize(indata_FO,2);%normalize the rows
%tempdata_beh = normalize(Side_2,2);
%%
x = indata_FO(1:43,:);
y = Side_2(1:43,:);

test_corr = corr(x,y);
%test_corr = x'*y;
%%
x = indata_FO(44:end,:);
y = Side_2(44:end,:);

test_corr2 = corr(x,y);
%%
figure
subplot(1,2,1)
imagesc(test_corr)
clim([-0.5 0.5])
colormap(rgb)
colorbar
ylabel('States')
xlabel('Physio Measures')
xticks(1:3)
xticklabels({'Body';'Eyes';'Face'})
title('Far','FontSize',14)

subplot(1,2,2)
imagesc(test_corr2)
clim([-0.5 0.5])
colormap(rgb)
colorbar
ylabel('States')
xlabel('Physio Measures')
xticks(1:3)
xticklabels({'Body';'Eyes';'Face'})
title('Near','FontSize',14)
%%
labels = ({'Body';'Eyes';'Face'});

figure
for i = 1:3
    subplot(3,1,i)
    hist(Side_2(:,i));
    title(labels{i},'FontSize',12)
    grid on
end
%% 
figure
barh(Side_2(:,2))
grid on
title('Eye Data','FontSize',16)
ylabel('Participants')


%% See the input TP data!
x = indata_TP(1:43,:);
y = Side_2(1:43,:);

test_corr = corr(x,y);
%test_corr = x'*y;
%%
x = indata_TP(44:end,:);
y = Side_2(44:end,:);

test_corr2 = corr(x,y);
%%
plotdata = [test_corr,test_corr2];
k = 6;
templabs = ({'Far Body';'Far Eyes';'Far Face';...
    'Near Body';'Near Eyes';'Near Face'});

figure
for i = 1:6
    subplot(2,3,i)
    temp_plot = plotdata(:,i);
    temp_plot = reshape(temp_plot,k,k)';
    shower_tile_plot(temp_plot);
    colormap(rgb)
    pbaspect([1 1 1])
    xticks(1.5:k+0.5)
    yticks(1.5:k+0.5)
    yticklabels(flipud(k:-1:1))
    xticklabels(1:k)
    clim([-1 1])
    colorbar
    xlabel('To State','FontSize',14)
    ylabel('From State','FontSize',14)
    title(templabs{i},'FontSize',16)
end
set(gcf,'color','w')

clear i k temp*

%%
LV = 2;
klabs = K_testsDiadiDS.labels;
figure
for i = 1:9
    subplot(3,3,i)
    histogram(TP_Splits{i}.pls_s_test(LV,LV,:))
    grid on
    z = round(TP_Splits{i}.z(LV),2);
    title(sprintf('Reproducibility: %s, z = %0.5g',klabs{i},z),'FontSize',14)
end
clear i
%% Threshold the states

data = K_testsDiadiDS.FC{9};
thresh_FC = cell(size(data));
for i = 1:length(data)
    tempdata = data{i};
    index = prctile(abs(tempdata),[50:99],1);
    minvalue = min(min(index));
    %maxvalue = max(max(index));
    tempdata(abs(tempdata)<minvalue) = 0;
    thresh_FC{i} = tempdata;
end
clear i tempdata index *value data
%%
addpath(genpath('STATIS-main'))
d_FC = cat(3,thresh_FC{:});
res_K15 = distatis2(d_FC);
%%
figure
shower_tile_plot(res_K15.C);
xticks([])
yticks([])
xlabel('States')
ylabel('States')
colorbar
title(sprintf('Similarity Matrix, K = %d',length(res_K15.C))...
    ,'FontSize',16)

clear ans

%% Now let's try graph theory:
%% Run a bunch of svds!
state_means = K_testsDiadiDS.state_means;
means_svd = cell(length(state_means),3);

for i = 1:length(state_means)
    tempdata = state_means{i};
    tempdata = normalize(tempdata);
    [u, s, v] = svd(tempdata);
    means_svd{i,1} = u;
    means_svd{i,2} = s;
    means_svd{i,3} = v;
end
clear i u s v temp*
%% Look at the s values!

figure
for i = 1:length(state_means)
    subplot(3,3,i)
    plotdata = diag(means_svd{i,2});
    plotdata = plotdata.^2/(sum(plotdata.^2));
    plot(plotdata)
    xticks(1:length(plotdata))
    grid on
    title(sprintf('Singular Values, K = %d',length(plotdata)))
end

%% Dot products

figure
for i = 1:length(state_means)
    subplot(3,3,i)
    plotdata = means_svd{i,1}(:,1:4);
    plotdata = plotdata'*plotdata;
    shower_tile_plot(plotdata);
    xticks([])
    yticks([])
    grid on
    title(sprintf('U Dot Product, K = %d',length(plotdata)))
end
%% Big dot product
big_dot = cell(1,9);
K = ([4,5,6,7,8,9,10,12,15]);

for i = 1:9
    tempdata = means_svd{i,1}(:,1:K(i));
    big_dot{i} = tempdata;
end
big_dot = cell2mat(big_dot);
%%
figure
plotdata = big_dot'*big_dot;
imagesc(plotdata);
xticks([])
yticks([])
grid on
colorbar
title(sprintf('All Ks dot product',length(plotdata)))
%% And column scores!

figure
for i = 1:length(state_means)
    subplot(3,3,i)
    plotdata = means_svd{i,3};
    shower_tile_plot(plotdata);
    xticks([])
    yticks([])
    grid on
    title(sprintf('V Scores, K = %d',length(plotdata)))
end
%%
W = big_dot'*big_dot;
[M,Q] = community_louvain(W,'','','negative_sym');
%%
index = [1,5,10,16,23,31,40,50,62,77];
figure
for i = 1:9
    subplot(3,3,i)
    start = index(i);
    stop = (index(i+1))-1;
    plotdata = M(start:stop);
    bar(plotdata);
    ylim([0,9])
    yticks(1:9)
    ylabel('Community')
    xlabel('K Component')
    grid on
    title(sprintf('Community membership: K = %d',K(i)),'FontSize',14)
end
%% Hmmm...run community detection at the K level
tempFC = K_testsDiadiDS.FC{5}';
tempFC = cell2mat(tempFC);
corrFC = corrcoef(tempFC');

[M,Q] = community_louvain(corrFC,'','','negative_sym');
%% Global vs local efficiency
Geff = cell(9,1);
Leff = cell(9,1);
for i = 1:9;
    temp_FC = K_testsDiadiDS.FC{i};
    glob = nan(length(temp_FC),1);
    loc = nan(68,length(temp_FC));
    for k = 1:length(temp_FC)
        W = temp_FC{k};
        glob(k) = efficiency_wei(W);
        temploc = efficiency_wei(W,2);
        loc(:,k) = real(temploc);
    end
    Geff{i} = glob;
    Leff{i} = loc;
end

clear i k temp_FC temp* glob loc W 
%%
plotdata = nan(9,1);
for i = 1:9
    tempdata = Geff{i};
    tempdata = normalize(tempdata);
    plotdata(i) = mean(tempdata);
end
clear i temp*

figure
bar(plotdata)
grid on
xticks(1:9)
xticklabels(K)
%xtickangle(45)
xlabel('K')
ylabel('Mean Global Efficiency')
title('Global Efficiency','FontSize',16)

%%
plotloc = nan(9,1);
for i = 1:9
    tempdata = Leff{i};
    tempdata = normalize(tempdata);
    plotloc(i) = mean(mean(tempdata));
end
clear i temp*

figure
bar(plotloc)
grid on
xticks(1:9)
xticklabels(K)
%xtickangle(45)
xlabel('K')
ylabel('Mean Local Efficiency')
title('Local Efficiency','FontSize',16)




%assemble into PLS shape
%add pls and link to read me
%run the PLS
%look at the results files
%compare!
