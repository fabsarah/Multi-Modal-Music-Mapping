%% Extracting metrics from HMM

% This script deals with extracting metrics from HMM and adding them to the
% structure array we saved during the HMM estimation. Here, we go over the
% following steps:
%    1. Extracting the state matrices and looking at the overall state properties
%    2. Reordering the output back into participant/task order
%    3. Extracting task-specific metrics

% There are a lot of possible things to extract, and this isn't an
% exhaustive list, just what I've using for this analysis. I've tried to
% avoid relying on stuff I've hard-coded in, but it's going to come up in
% the plotting sections!

%% 5.1 Getting the FC Matrices:
FC = cell(1,Outdata12.options.K);%initialize the output cell

for i = 1:length(FC)
    [~,S] = getFuncConn(Rest_hmm12.hmm,i);%get the correlation matrix
    FC{i} = S; %populate the FC cell
end

Rest_hmm12.FC = FC;%add it to the structure array
clear i S  % make look nice

%% 5.5.1 Switching Rate and Fractional Occupancy:
data = Rest_hmm12.Gamma;%getting the relevant HMM output
options = Rest_hmm12.options;
T = Rest_hmm12.T_ds;
SR = getSwitchingRate(data,T,options);
FO = getFractionalOccupancy(data,T,options,2);
N_nonempty = Rest_hmm12.N_nonempty;
%This will give us long column vectors of data (pieces*participants), so
% next, we get it back in matrix and cell space:

start = 1;% initialize a counter
tasks = 53;%how many tasks?
parts = 17;%how many participants?
tempmat_SR = nan(tasks,parts);%initialize the empty matrix for SR
tempmat_FO = cell(1,parts);%empty cell array for FO (task*state*participant)

for i = 1:parts% Participants
    tempdataFO = nan(tasks,parts);%initializing the FO matrix
    dex = N_nonempty{i};% each participant's unique piece index
    tempdata = SR(start:(start-1)+length(dex));%getting their SR data
    tempmat_SR(dex,i) = tempdata;%populating the relevant rows in the empty matrix
    tempdataFO(dex,:) = FO(start:(start-1)+length(dex),:);% getting each participant's FO data
    tempmat_FO{i} = tempdataFO;%putting it in a cell
    start = start+length(dex);%rolling over the counter to pick up where this one left off
end

Rest_hmm12.Metrics.SR = tempmat_SR;% put it in the array!
Rest_hmm12.Metrics.FO = tempmat_FO;
clear data options T temp SR FO start tempmat_SR tempmat_FO i dex tempdata array plotdata% make look nice

%% 5.1.2 Plotting the transitional probability matrix and FC matrices:
K = Rest_hmm12.options.K;
figure 
subplot(3,3,1)
TProps = getTransProbs(Rest_hmm12.hmm);
imagesc(TProps)
colorbar
title(sprintf('Transitional Probabilities, %d states',K),'FontSize',18)
xticks(1:K)
yticks(1:K)
xlabel('State')
ylabel('State')

for i = 1:Rest_hmm12.options.K
subplot(3,3,i+1)
imagesc(Rest_hmm12.FC{i})
caxis([0 1])
colorbar
yticks(17:33:50)
yticklabels({'Left','Right'})
title(sprintf('State %d',i),'FontSize',18)
end
clear i S res K FO array

%% 5.2 Get the grand mean of the FC states, and mean centre each state
%optional, but useful if your states all look alike at first glance
K = Rest_hmm12.options.K;
rois = 68;% how many regions you have
FC = cat(3,FC{:});%rearranging the cell into a 3-d array
Rest_hmm12.mean_FC = mean(FC,3);%mean
Rest_hmm12.std_FC = std(FC,0,3);%standard deviation
mc_FC = nan(rois,rois,K);%setting the mean output matrices
for i = 1:K
    data = Rest_hmm12.FC{1,i};
    tempnew = (data-Rest_hmm12.mean_FC)./Rest_hmm12.std_FC;%mean centering!
    mc_FC(:,:,i) = tempnew;
end
Rest_hmm12.mc_FC = mc_FC;% put it in the structure array!
clear data i tempnew mc_FC FC
%% 5.2.1 Plotting the grand mean and mean-centred FC matrices!
K = Rest_hmm12.options.K;
figure 

subplot(5,3,1)
imagesc(Rest_hmm12.mean_FC)
colorbar
title(sprintf('Grand Mean FC, K = %d',K),'FontSize',18)
yticks(17:33:50)
yticklabels({'Left','Right'})

for i = 1:K
subplot(5,3,i+1)
imagesc(Rest_hmm12.mc_FC(:,:,i))
colorbar
yticks(17:33:50)
yticklabels({'Left','Right'})
title(sprintf('State %d, Mean-Centred',i),'FontSize',16)
end
clear i S res K
%% 5.3 Net means:
Rest_hmm12.Metrics = struct();%initialize a structure array within our existing structure array
data = Rest_hmm12.hmm;
net_mean = getMean(data); % get the mean activity of each state
net_mean = zscore(net_mean); % show activations for each state relative to the state average
Rest_hmm12.Metrics.Means = net_mean;% put it in the array in the array

clear net_mean
%% 5.3.1 Plotting!
K = Rest_hmm12.options.K;
figure
imagesc(Rest_hmm12.Metrics.Means)
yticks(1:rois)
yticklabels(Rest_hmm12.lat_labs)
colorbar
xticks(1:K)
xlabel('States')
title('Group mean activity per state, songs and rest','FontSize',18)

%% 5.4 Transitional Probability Matrix
%this will give you the transitional probability matrix for your entire
%dataset. I'll send the code for doing this task-wise in a separate file

data = Rest_hmm12.hmm;
TProb = getTransProbs(data);

Rest_hmm12.Metrics.TProbs = TProb;
clear i temp data TProb
%% 5.5 Manually downsampling T
%now, we're getting into task- and participant-wide measures, so we need
%accurate time vectors for indexing
T_ds = Rest_hmm12.T; % number of data points per song (40 seconds*Fs = 20480)
for i = 1:length(T_ds)
    T_ds{i} = T_ds{i}/2;%I downsampled by 2 (512->256)
end
Rest_hmm12.T_ds = T_ds;
clear T_ds i;
%% 5.5.1 Switching Rate and Fractional Occupancy:
data = Rest_hmm12.Gamma;%getting the relevant HMM output
options = Rest_hmm12.options;
T = Rest_hmm12.T_ds;
SR = getSwitchingRate(data,T,options);
FO = getFractionalOccupancy(data,T,options,2);

%This will give us long column vectors of data (pieces*participants), so
% next, we get it back in matrix and cell space:

start = 1;% initialize a counter
tasks = 53;%how many tasks?
parts = 17;%how many participants?
tempmat_SR = nan(tasks,parts);%initialize the empty matrix for SR
tempmat_FO = cell(1,parts);%empty cell array for FO (task*state*participant)
for i = 1:parts% Participants
    dex = N_nonempty{i};% each participant's unique piece index
    tempdata = SR(start:(start-1)+length(dex));%getting their SR data
    tempmat_SR(dex,i) = tempdata;%populating the relevant rows in the empty matrix
    tempdataFO = FO(start:(start-1)+length(dex),:);% getting each participant's FO data
    tempmat_FO{i} = tempdataFO;%putting it in a cell
    start = start+length(dex);%rolling over the counter to pick up where this one left off
end
Rest_hmm12.Metrics.SR = tempmat_SR;% put it in the array!
Rest_hmm12.Metrics.FO = tempmat_FO;
clear data options T temp SR FO start tempmat_SR tempmat_FO i dex tempdata % make look nice

%% 5.5.2. Visualize SR matrix: now, we look at it!

data = Rest_hmm12.Metrics.SR;
figure
imagesc(data)%zscores won't work unless you interpolate the nans
xticks(1:size(data,2))
xlabel('Participants')
yticks(1:length(data))
yticklabels(rest_labs)
colorbar
title('Switching Rate','FontSize',16)
clear data
%% 5.5.3 Visualizing FO matrices
data = Rest_hmm12.Metrics.FO;
figure
for i = 1:parts
    subplot(4,5,i)%this will need to be adjusted depending on your # of participants
    imagesc(data{i})%zscores won't work unless you interpolate the nans
    colorbar
    title(sprintf('FO, Subject %d',i))
end
clear data i

%% 5.6 Vpath and Gamma by participant and piece:
%Reorganizing the vpath and Gamma
vpath_Sub = cell(17,1);
Gamma_Sub = cell(17,1);
data = Rest_hmm20s12.N_nonempty;
vdata = Rest_hmm20s12.vpath;
gdata = Rest_hmm20s12.Gamma;

vdata = reshape(vdata,5120,792)';%792 is the # of cells. Figure out how to index this
gammadata = cell(1,12);
%% Break Gamma into a cell array
for i = 1:12
    G = gdata(:,i);
    G = reshape(G,5120,792)';
    gammadata{i} = G;
    disp(i)
end
clear i G
%% Getting the vpath divided up by participant
start = 1;
for part = 1:17
    newdata = nan(53,5120);
    dex = length(data{part});
    index = data{part};
    stop = (start-1)+dex;%how many timepoints per piece (20 s at 256/2 Hz)
    newdata(index,:) = vdata(start:stop,:);
    start = stop+1;
    vpath_Sub{part} = newdata;
end
Rest_hmm20s12.vpath_Sub = vpath_Sub;

% check the data!
x = cell2mat(vpath_Sub);
x(any(isnan(x), 2), :) = [];
y = vdata;
if isequal(x,y)
    disp('The data is good!')
else
    disp('The data is full of spiders - audit this!')
end
clear piece_start piece_stop s piecedata piecedex x y
clear vpath_Sub vdata start i dex stop newdata index 
%% Now do Gamma!
Gamma_Sub = cell(17,12);
for K = 1:12 %state-wise
    start = 1;
    for part = 1:17%participants
    newdata = nan(53,5120);
    dex = length(data{part});
    index = data{part};
    stop = (start-1)+dex;
    newdata(index,:) = gammadata{K}(start:stop,:);
    start = stop+1;
    Gamma_Sub{part,K} = newdata;
    end
end
Rest_hmm20s12.Gamma_Sub = Gamma_Sub;
%% Check ALL The data!
checkmat = nan(1,12);
for K = 1:12
    x = cell2mat(Gamma_Sub(:,K));
    x(any(isnan(x), 2), :) = [];
    y = gammadata{K};
    checkmat(K) = isequal(x,y);
end

if sum(checkmat)==K
    disp('The data is good!')
else
    disp('The data is full of spiders - audit this!')
end
clear K start stop dex index G gammadata newdata Gamma_Sub x y


%%5.7 Reorganizing the vpath by piece:

data = Rest_hmm20s12.vpath_Sub;%get the long vpath vectors
vpath_Piece = cell(17,53);%initialize a participant*piece cell
for part = 1:17%participants
    tempdata = data{part};%and the vector
    for piece = 1:53
        if isnan(tempdata(piece,:))
            continue
        else
        vpath_Piece{part,piece} = tempdata(piece,:);
        end
    end
end
%% Now do Gamma!
gdata = Rest_hmm20s12.Gamma_Sub;
Gamma_Piece = cell(17,53);
for part = 1:17
    tempmat = nan(12,5120);
    for piece = 1:53
    for state = 1:12
        tempdata = gdata{part,state}(piece,:);
        tempmat(state,:) = tempdata;
    end
    if sum(isnan(tempmat))>0
            continue
        else
            Gamma_Piece{part,piece} = tempmat;
    end
    end
end
%% Spot check!
%vpath:
part = 17;
piece = 4;
y = data{part}(piece,:);
x = vpath_Piece{part,piece};
if isequal(x,y)
    disp('These data are good!')
else
    disp('Misery and suffering!')
end
%%
%Gamma:
checkmat = nan(1,12);
part = 1;
piece = 1;
tempdata = Gamma_Piece{part,piece};
for K = 1:12
    x = Rest_hmm20s12.Gamma_Sub{part,K}(piece,:);
    y = tempdata(K,:);
    checkmat(K) = isequal(x,y);
end

if sum(checkmat)==K
    disp('These data are good!')
else
    disp('Misery and suffering!Audit this')
end

%% Now we add it to the array!    
Rest_hmm20s12.vpath_Piece = vpath_Piece;% put it in the array!
Rest_hmm20s12.Gamma_Piece = Gamma_Piece;

clear data vpath_Piece i piecedex tempdata start s stop piecedata piecedatag Gamma_Piece % and make look nice

%% 5.7 Reorganizing the vpath by piece:

data = Rest_hmm12.vpath_Sub;%get the long vpath vectors
gdata = Rest_hmm12.Gamma_Sub;
vpath_Piece = cell(parts,tasks);%initialize a participant*piece cell
Gamma_Piece = cell(parts,tasks);
for i = 1:parts%participants
    piecedex = Rest_hmm12.N_nonempty{i};%get their nonempty piece index
    tempdata = data{i};%and the vector
    tempdatag = gdata{i};
    start = 1;%start a counter
        for s = 1:length(piecedex)
            stop = (start-1)+(5120);%getting the stop points (5120 in this case)
            piecedata = tempdata(start:stop);%get the right snippet of data
            vpath_Piece{i,piecedex(s)} = piecedata';%put it in the cell in part:piece order
            piecedatag = tempdatag(start:stop,:);
            Gamma_Piece{i,piecedex(s)} = piecedatag';
            start = stop+1;%re-do the start point
        end
end
Rest_hmm12.vpath_Piece = vpath_Piece;% put it in the array!
Rest_hmm12.Gamma_Piece = Gamma_Piece;
clear data vpath_Piece i piecedex tempdata start s stop piecedata piecedatag Gamma_Piece
